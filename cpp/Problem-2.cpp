/*  Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/

#include <iostream>
#include <vector>

using namespace std;

int main()
{
    vector<unsigned int> *_sequence = new vector<unsigned int>();
    unsigned int _sum = 0;              // the solution

    _sequence->push_back(1);            // populate the first two elements, which are 1 and 2
    _sequence->push_back(2);


    do{
       // Populate the Fibonacci sequence as long as the values are less than 4 M
        int index_max = _sequence->size() - 1;      // index_max gets the last index in the sequence
        unsigned int _temp_current_sum;              // temporary element
        _temp_current_sum = (*_sequence)[index_max] + (*_sequence)[index_max - 1];

        if(_temp_current_sum >= 4000000){
            break;                                  // break the loop without pushing back the value over 4M
        }

        _sequence->push_back(_temp_current_sum);
    }while(true);         // while loop will be broken when the sum reaches 4M


    // iterate the sequence and sum the even values
    for(int i=0;i<_sequence->size();i++){
        if((*_sequence)[i] % 2 == 0){
            _sum += (*_sequence)[i];                // even number, add it up to the sum
        }else{
                                                    // odd number, do nothing
        }
    }

    delete _sequence;                   // cleanup

    cout<<_sum<<endl;                   // display the solution
    return 0;
}
